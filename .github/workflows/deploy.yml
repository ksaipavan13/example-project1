name: Deployment Workflow

on:
  workflow_dispatch:
    inputs:
      tag_id:
        description: 'give a tag ID here'
        required: true
        default: ''

jobs:
  deploy:
    environment: Test_DEV
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get package version
        id: get_version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          TAG_NAME: ${{ steps.get_version.outputs.version }}
        run: |
          release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" \
            | jq -r '.id')
          if [ "$release_id" != "null" ]; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "release_id=$release_id" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create or update release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
        if: steps.check_release.outputs.release_exists == 'false'

      - name: Update existing release
        if: steps.check_release.outputs.release_exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          TAG_NAME: ${{ steps.get_version.outputs.version }}
          RELEASE_ID: ${{ steps.check_release.outputs.release_id }}
        run: |
          curl -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID \
            -d '{
              "tag_name": "${{ env.TAG_NAME }}",
              "name": "Release ${{ env.TAG_NAME }}",
              "draft": false,
              "prerelease": false
            }'

      - name: Deploy application
        env:
          TAG: ${{ steps.get_version.outputs.version }}
        run: |
          echo "Deploying version $TAG"
          if [ -f index.html ]; then
            echo "Contents of index.html:"
            cat index.html
          else
            echo "index.html does not exist. Skipping file output."
          fi
          echo "Deployment of version $TAG completed successfully."
